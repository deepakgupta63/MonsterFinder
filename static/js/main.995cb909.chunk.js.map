{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","Cardlist","monsters","map","SearchBox","placeholder","handleChange","onChange","type","App","state","searchField","fetch","then","response","json","users","console","log","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAIaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAY,iBAAjB,UACA,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,YAChF,6BACKL,EAAMG,QAAQG,OAGnB,4BAAIN,EAAMG,QAAQI,YCPTC,EAAW,SAACR,GAAD,OACpB,qBAAKC,UAAY,YAAjB,SACKD,EAAMS,SAASC,KAAK,SAAAP,GAAO,OACxB,cAAC,EAAD,CAAyBA,QAASA,GAArBA,EAAQC,UCHpBO,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBACIZ,UAAW,SACXW,YAAcA,EACdE,SAAWD,EACXE,KAAM,aCoFCC,E,kDAzDb,aAAc,IAAD,8BACX,gBAEKC,MAAQ,CACXR,SAAU,CACR,CACEH,KAAK,eACLF,GAAI,GAEN,CACEE,KAAK,SACLF,GAAG,GAEL,CACEE,KAAK,UACLF,GAAG,IAGPc,YAAa,IAlBJ,E,qDAsBb,WAAoB,IAAD,OACjBC,MAAM,8CACLC,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAK,SAAAG,GACJC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CAACjB,SAAUc,S,oBAK7B,WAAS,IAAD,OAEN,EAAgCI,KAAKV,MAA9BR,EAAP,EAAOA,SAAUS,EAAjB,EAAiBA,YACXU,EAAmBnB,EAASoB,QAAO,SAAA1B,GAAO,OAAGA,EAAQG,KAAKwB,cAAcC,SAASb,EAAYY,kBAEnG,OACE,sBAAK7B,UAAU,MAAf,UAKG,oBAAIA,UAAY,QAAhB,4BACD,cAAC,EAAD,CAAWW,YAAY,iBAAiBC,aAAgB,SAAAmB,GAAC,OAAI,EAAKN,SAAS,CAACR,YAAac,EAAEC,OAAOC,WAClG,cAAC,EAAD,CAAUzB,SAAYmB,W,GA9CZO,aCvBHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.995cb909.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport './card.style.css'\r\n\r\nexport const Card = props =>(\r\n    <div className = 'card-container'>\r\n    <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt=\"monster\" />\r\n    <h1>\r\n        {props.monster.name}\r\n        {/* {console.log(props)} */}\r\n    </h1>\r\n    <p>{props.monster.email}</p>\r\n</div>\r\n)","import React from 'react';\r\nimport './card-list.style.css'\r\nimport {Card} from '../card/card.component'\r\n\r\nexport const Cardlist = (props) => (\r\n    <div className = 'card-list'>\r\n        {props.monsters.map( monster =>(\r\n            <Card key = {monster.id} monster={monster} />\r\n            // <div> {monster.name} </div>\r\n        ))\r\n        }\r\n    </div> \r\n)","import React from 'react';\r\n\r\nimport './search-box.style.css'\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n    <input\r\n        className= 'search'\r\n        placeholder= {placeholder}\r\n        onChange= {handleChange}\r\n        type= 'search'\r\n    />\r\n)","import React, {Component} from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport {Cardlist} from './components/card-list/card-list.component'\n\nimport {SearchBox} from './components/search-box/search-box.component'\n\n// class App extends Component{\n//   constructor(){\n//     super();\n\n//     this.state = {\n//       valueString: 'Hello Deepak'\n//     }\n//   }\n\n\n//   render(){\n//     return (\n//       <div className=\"App\">\n//         <header className=\"App-header\">\n//           <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//           <p>\n//            {this.state.valueString}\n//           </p>\n//           <button onClick = {()=>this.setState({valueString: 'You Clicked the button'})}>Click to change</button>\n//         </header>\n//       </div>\n//     );\n//   }\n\n// }\n\n\n\nclass App extends Component{\n  constructor(){\n    super();\n\n    this.state = {\n      monsters: [\n        {\n          name:'Frankenstine',\n          id: 1\n        },\n        {\n          name:'Zombie',\n          id:2\n        },\n        {\n          name:'Dracula',\n          id:3\n        },\n      ],\n      searchField: ''\n    }\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then( response => response.json())\n    .then(users => {\n      console.log(users);\n      this.setState({monsters: users})\n    })\n  }\n\n\n  render(){\n\n    const {monsters, searchField} = this.state;\n    const filteredMonsters = monsters.filter(monster =>monster.name.toLowerCase().includes(searchField.toLowerCase()))\n\n    return (\n      <div className=\"App\">\n        {\n        /* <input type = 'search'\n         placeholder='Search Monster'\n         onChange = {e => this.setState({searchField: e.target.value}, () => console.log(this.state.searchField))} /> */}\n         <h1 className = 'title'>Monster Finder</h1>\n        <SearchBox placeholder='Search Monster' handleChange = {e => this.setState({searchField: e.target.value})}/>\n        <Cardlist monsters = {filteredMonsters}> \n         </Cardlist>\n      </div>\n    );\n  }\n\n}\n\n// function App() {\n  \n// }\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}